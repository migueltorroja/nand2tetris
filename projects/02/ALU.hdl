// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not(in=zx,out=innzx);
   And16(a=x,
   b[0]=innzx,
   b[1]=innzx,
   b[2]=innzx,
   b[3]=innzx,
   b[4]=innzx,
   b[5]=innzx,
   b[6]=innzx,
   b[7]=innzx,
   b[8]=innzx,
   b[9]=innzx,
   b[10]=innzx,
   b[11]=innzx,
   b[12]=innzx,
   b[13]=innzx,
   b[14]=innzx,
   b[15]=innzx,
   out=zxout);
   Not16(in=zxout,out=outzxneg);
   Mux16(a=zxout,b=outzxneg,sel=nx,out=nxout);

   Not(in=zy,out=innzy);
   And16(a=y,
   b[0]=innzy,
   b[1]=innzy,
   b[2]=innzy,
   b[3]=innzy,
   b[4]=innzy,
   b[5]=innzy,
   b[6]=innzy,
   b[7]=innzy,
   b[8]=innzy,
   b[9]=innzy,
   b[10]=innzy,
   b[11]=innzy,
   b[12]=innzy,
   b[13]=innzy,
   b[14]=innzy,
   b[15]=innzy,
   out=zyout);
   Not16(in=zyout,out=zyneg);
   Mux16(a=zyout,b=zyneg,sel=ny,out=nyout);

   And16(a=nxout,b=nyout,out=xandyf);
   Add16(a=nxout,b=nyout,out=xplusyf);

   Mux16(a=xandyf,b=xplusyf,sel=f,out=nobefore);
   Not16(in=nobefore,out=outneg);
   Mux16(a=nobefore,b=outneg,sel=no,
   out[15]=ng,out=preout,out=out
);

   Or8Way(in=preout[0..7], out=loor);
   Or8Way(in=preout[8.15], out=hior);
   Not(in=loor,out=nloor);
   Not(in=hior,out=nhior);
   And(a=nloor,b=nhior,out=zr);
   //Or(a=outpre[15],b=outpre[15],ng);
}
